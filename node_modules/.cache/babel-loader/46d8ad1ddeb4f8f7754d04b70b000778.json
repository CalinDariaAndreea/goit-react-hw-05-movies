{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yukina\\\\OneDrive\\\\Desktop\\\\git\\\\goit-react-hw-05-movies\\\\src\\\\pages\\\\Movies.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom'; // додаємо хук для роботи з параметрами URL\n\nimport { toast } from 'react-hot-toast'; // імпортуємо плагін для сповіщень\n\nimport { fetchMovieByName } from '../services/api';\nimport SearchMovies from '../components/SearchMovies/SearchMovies';\nimport { List, ListItem, SectionTitle, StyledLink, StyledSection } from '../components/MovieList/MovieList.styled'; // імпортуємо стилі\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Movies = () => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation(); // додаємо запит на фільм\n\n  useEffect(() => {\n    var _searchParams$get;\n\n    const query = (_searchParams$get = searchParams.get('query')) !== null && _searchParams$get !== void 0 ? _searchParams$get : ''; // щоб не було помилки, якщо query не буде в URL\n\n    if (!query) return; // додаємо сповіщення про пошук\n\n    const getMovie = async () => {\n      try {\n        const {\n          results\n        } = await fetchMovieByName(query); // додаємо сповіщення, якщо фільмів не знайдено\n\n        if (results.length === 0) {\n          toast.dismiss(); // очищаємо попереднє сповіщення\n\n          toast.error('No movies found');\n          setMovies([]); // очищаємо масив фільмів\n        } else {\n          setMovies(results); // записуємо масив фільмів\n        }\n      } catch (error) {\n        toast.error(error.message);\n        setMovies([]);\n      }\n    }; // додаємо запит на фільм\n\n\n    getMovie();\n  }, [searchParams]); // додаємо функцію для пошуку фільму\n\n  const handleSubmit = query => {\n    setSearchParams({\n      query\n    }); // записуємо query в URL\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(StyledSection, {\n      children: [/*#__PURE__*/_jsxDEV(SectionTitle, {\n        children: \"Movies Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchMovies, {\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(List, {\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(StyledLink, {\n            to: `/movies/${movie.id}`,\n            state: {\n              from: location\n            },\n            children: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Movies, \"dt4fu0hfhzK69kcj5EkyOwPO+qo=\", false, function () {\n  return [useSearchParams, useLocation];\n});\n\n_c = Movies;\nexport default Movies; // Діма Берестень\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["C:/Users/Yukina/OneDrive/Desktop/git/goit-react-hw-05-movies/src/pages/Movies.jsx"],"names":["React","useState","useEffect","useSearchParams","useLocation","toast","fetchMovieByName","SearchMovies","List","ListItem","SectionTitle","StyledLink","StyledSection","Movies","movies","setMovies","searchParams","setSearchParams","location","query","get","getMovie","results","length","dismiss","error","message","handleSubmit","map","movie","id","from","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,kBAA7C,C,CAAiE;;AACjE,SAASC,KAAT,QAAsB,iBAAtB,C,CAAyC;;AACzC,SAASC,gBAAT,QAAiC,iBAAjC;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,SACEC,IADF,EAEEC,QAFF,EAGEC,YAHF,EAIEC,UAJF,EAKEC,aALF,QAMO,0CANP,C,CAMmD;;;;AAEnD,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkCd,eAAe,EAAvD;AACA,QAAMe,QAAQ,GAAGd,WAAW,EAA5B,CAHmB,CAKnB;;AACAF,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,UAAMiB,KAAK,wBAAGH,YAAY,CAACI,GAAb,CAAiB,OAAjB,CAAH,iEAAgC,EAA3C,CADc,CACiC;;AAC/C,QAAI,CAACD,KAAL,EAAY,OAFE,CAId;;AACA,UAAME,QAAQ,GAAG,YAAY;AAC3B,UAAI;AACF,cAAM;AAAEC,UAAAA;AAAF,YAAc,MAAMhB,gBAAgB,CAACa,KAAD,CAA1C,CADE,CAGF;;AACA,YAAIG,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACxBlB,UAAAA,KAAK,CAACmB,OAAN,GADwB,CACP;;AACjBnB,UAAAA,KAAK,CAACoB,KAAN,CAAY,iBAAZ;AACAV,UAAAA,SAAS,CAAC,EAAD,CAAT,CAHwB,CAGT;AAChB,SAJD,MAIO;AACLA,UAAAA,SAAS,CAACO,OAAD,CAAT,CADK,CACe;AACrB;AACF,OAXD,CAWE,OAAOG,KAAP,EAAc;AACdpB,QAAAA,KAAK,CAACoB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACAX,QAAAA,SAAS,CAAC,EAAD,CAAT;AACD;AACF,KAhBD,CALc,CAuBd;;;AACEM,IAAAA,QAAQ;AACX,GAzBQ,EAyBN,CAACL,YAAD,CAzBM,CAAT,CANmB,CAiCnB;;AACA,QAAMW,YAAY,GAAGR,KAAK,IAAI;AAC5BF,IAAAA,eAAe,CAAC;AAAEE,MAAAA;AAAF,KAAD,CAAf,CAD4B,CACA;AAC7B,GAFD;;AAIA,sBACE;AAAA,2BACE,QAAC,aAAD;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAGE,QAAC,YAAD;AAAc,QAAA,QAAQ,EAAEQ;AAAxB;AAAA;AAAA;AAAA;AAAA,cAHF,oBAKE,QAAC,IAAD;AAAA,kBACGb,MAAM,CAACc,GAAP,CAAWC,KAAK,iBACf,QAAC,QAAD;AAAA,iCAGE,QAAC,UAAD;AAAY,YAAA,EAAE,EAAG,WAAUA,KAAK,CAACC,EAAG,EAApC;AAAuC,YAAA,KAAK,EAAE;AAAEC,cAAAA,IAAI,EAAEb;AAAR,aAA9C;AAAA,sBACGW,KAAK,CAACG;AADT;AAAA;AAAA;AAAA;AAAA;AAHF,WAAeH,KAAK,CAACC,EAArB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA3DD;;GAAMjB,M;UAEoCV,e,EACvBC,W;;;KAHbS,M;AA6DN,eAAeA,MAAf,C,CAEA","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSearchParams, useLocation } from 'react-router-dom'; // додаємо хук для роботи з параметрами URL\r\nimport { toast } from 'react-hot-toast'; // імпортуємо плагін для сповіщень\r\nimport { fetchMovieByName } from '../services/api';\r\nimport SearchMovies from '../components/SearchMovies/SearchMovies';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  SectionTitle,\r\n  StyledLink,\r\n  StyledSection,\r\n} from '../components/MovieList/MovieList.styled'; // імпортуємо стилі\r\n\r\nconst Movies = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const location = useLocation();\r\n\r\n  // додаємо запит на фільм\r\n  useEffect(() => {\r\n    const query = searchParams.get('query') ?? ''; // щоб не було помилки, якщо query не буде в URL\r\n    if (!query) return;\r\n\r\n    // додаємо сповіщення про пошук\r\n    const getMovie = async () => {\r\n      try {\r\n        const { results } = await fetchMovieByName(query);\r\n\r\n        // додаємо сповіщення, якщо фільмів не знайдено\r\n        if (results.length === 0) {\r\n          toast.dismiss(); // очищаємо попереднє сповіщення\r\n          toast.error('No movies found');\r\n          setMovies([]); // очищаємо масив фільмів\r\n        } else {\r\n          setMovies(results); // записуємо масив фільмів\r\n        }\r\n      } catch (error) {\r\n        toast.error(error.message);\r\n        setMovies([]);\r\n      }\r\n    };\r\n\r\n    // додаємо запит на фільм\r\n      getMovie();\r\n  }, [searchParams]);\r\n\r\n  // додаємо функцію для пошуку фільму\r\n  const handleSubmit = query => {\r\n    setSearchParams({ query }); // записуємо query в URL\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <StyledSection>\r\n        <SectionTitle>Movies Page</SectionTitle>\r\n\r\n        <SearchMovies onSubmit={handleSubmit} /> {/* додаємо компонент для пошуку фільму */}\r\n\r\n        <List>\r\n          {movies.map(movie => (\r\n            <ListItem key={movie.id}>\r\n\r\n              {/* додаємо посилання на сторінку фільму */}\r\n              <StyledLink to={`/movies/${movie.id}`} state={{ from: location }}>\r\n                {movie.title}\r\n              </StyledLink>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </StyledSection>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n\r\n// Діма Берестень\r\n"]},"metadata":{},"sourceType":"module"}