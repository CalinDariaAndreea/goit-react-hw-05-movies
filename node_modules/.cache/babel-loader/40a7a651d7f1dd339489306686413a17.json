{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Yukina/OneDrive/Desktop/git/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"C:/Users/Yukina/OneDrive/Desktop/git/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"C:/Users/Yukina/OneDrive/Desktop/git/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Yukina/OneDrive/Desktop/git/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/Yukina/OneDrive/Desktop/git/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Yukina/OneDrive/Desktop/git/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/Yukina/OneDrive/Desktop/git/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"C:/Users/Yukina/OneDrive/Desktop/git/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"C:/Users/Yukina/OneDrive/Desktop/git/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Yukina/OneDrive/Desktop/git/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/Yukina/OneDrive/Desktop/git/goit-react-hw-05-movies/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Yukina\\\\OneDrive\\\\Desktop\\\\git\\\\goit-react-hw-05-movies\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\n/**\n * @remix-run/router v1.4.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$initialEntri = _options.initialEntries,\n      initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n      initialIndex = _options.initialIndex,\n      _options$v5Compat = _options.v5Compat,\n      v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  var history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n        _parsePath$pathname = _parsePath.pathname,\n        pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n        _parsePath$search = _parsePath.search,\n        search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n        _parsePath$hash = _parsePath.hash,\n        hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n      pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n      _ref$search = _ref.search,\n      search = _ref$search === void 0 ? \"\" : _ref$search,\n      _ref$hash = _ref.hash,\n      hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  var parsedPath = {};\n\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    var searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options2 = options,\n      _options2$window = _options2.window,\n      window = _options2$window === void 0 ? document.defaultView : _options2$window,\n      _options2$v5Compat = _options2.v5Compat,\n      v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    var nextIndex = getIndex();\n    var delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  var history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nvar immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, detectErrorBoundary, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, {\n        hasErrorBoundary: detectErrorBoundary(route),\n        id: id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, {\n        id: id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, detectErrorBoundary, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n\n  routes.forEach(function (route, index) {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  var _segments = _toArray(segments),\n      first = _segments[0],\n      rest = _segments.slice(1); // Optional path segments are denoted by a trailing `?`\n\n\n  var isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  var required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  }))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\n\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\n\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\n\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  var path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  var prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  var segments = path.split(/\\/+/).map(function (segment, index, array) {\n    var isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      var star = \"*\";\n      var starParam = params[star]; // Apply the splat\n\n      return starParam;\n    }\n\n    var keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n\n    if (keyMatch) {\n      var _keyMatch = _slicedToArray(keyMatch, 3),\n          key = _keyMatch[1],\n          optional = _keyMatch[2];\n\n      var param = params[key];\n\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n\n      return param;\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(function (segment) {\n    return !!segment;\n  });\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n      _compilePath2 = _slicedToArray(_compilePath, 2),\n      matcher = _compilePath2[0],\n      paramNames = _compilePath2[1];\n\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  var _ref3 = typeof to === \"string\" ? parsePath(to) : to,\n      toPathname = _ref3.pathname,\n      _ref3$search = _ref3.search,\n      search = _ref3$search === void 0 ? \"\" : _ref3$search,\n      _ref3$hash = _ref3.hash,\n      hash = _ref3$hash === void 0 ? \"\" : _ref3$hash;\n\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  var to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n\n  var _super = _createSuper(AbortedDeferredError);\n\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n\n    _classCallCheck(this, DeferredData);\n\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref4 = _slicedToArray(_ref, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n\n      this.pendingKeysSet.delete(key);\n\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signal) {\n        var _this5 = this;\n\n        var aborted, onAbort;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                aborted = false;\n\n                if (this.done) {\n                  _context.next = 7;\n                  break;\n                }\n\n                onAbort = function onAbort() {\n                  return _this5.cancel();\n                };\n\n                signal.addEventListener(\"abort\", onAbort);\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  _this5.subscribe(function (aborted) {\n                    signal.removeEventListener(\"abort\", onAbort);\n\n                    if (aborted || _this5.done) {\n                      resolve(aborted);\n                    }\n                  });\n                });\n\n              case 6:\n                aborted = _context.sent;\n\n              case 7:\n                return _context.abrupt(\"return\", aborted);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref5 = _slicedToArray(_ref2, 2),\n            key = _ref5[0],\n            value = _ref5[1];\n\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n\n  return DeferredData;\n}();\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  var responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponse);\n\n  if (internal === void 0) {\n    internal = false;\n  }\n\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nvar isServer = !isBrowser;\n\nvar defaultDetectErrorBoundary = function defaultDetectErrorBoundary(route) {\n  return Boolean(route.hasErrorBoundary);\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var detectErrorBoundary = init.detectErrorBoundary || defaultDetectErrorBoundary; // Routes keyed by ID\n\n  var manifest = {}; // Routes in tree format for matching\n\n  var dataRoutes = convertRoutesToDataRoutes(init.routes, detectErrorBoundary, undefined, manifest);\n  var inFlightDataRoutes; // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n        matches = _getShortCircuitMatch.matches,\n        route = _getShortCircuitMatch.route;\n\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n\n  var initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(function (m) {\n    return m.route.lazy;\n  }) && ( // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null);\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  var blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  var ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n          location = _ref.location,\n          delta = _ref.delta; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    });\n\n    if (state.initialized) {\n      return router;\n    }\n\n    var lazyMatches = state.matches.filter(function (m) {\n      return m.route.lazy;\n    });\n\n    if (lazyMatches.length === 0) {\n      // Kick off initial data load if needed.  Use Pop to avoid modifying history\n      startNavigation(Action.Pop, state.location);\n      return router;\n    } // Load lazy modules, then kick off initial data load if needed\n\n\n    var lazyPromises = lazyMatches.map(function (m) {\n      return loadLazyRouteModule(m.route, detectErrorBoundary, manifest);\n    });\n    Promise.all(lazyPromises).then(function () {\n      var initialized = !state.matches.some(function (m) {\n        return m.route.loader;\n      }) || init.hydrationData != null;\n\n      if (initialized) {\n        // We already have required loaderData so we can just set initialized\n        updateState({\n          initialized: true\n        });\n      } else {\n        // We still need to kick off initial data loads\n        startNavigation(Action.Pop, state.location);\n      }\n    });\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    var _iterator2 = _createForOfIteratorHelper(blockerFunctions),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 1),\n            key = _step2$value[0];\n\n        deleteBlocker(key);\n      } // Always respect the user flag.  Otherwise don't reset on mutation\n      // submission navigations unless they redirect\n\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, blockerKey;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof to === \"number\")) {\n                _context2.next = 3;\n                break;\n              }\n\n              init.history.go(to);\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n              currentLocation = state.location;\n              nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n              // URL from window.location, so we need to encode it here so the behavior\n              // remains the same as POP and non-data-router usages.  new URL() does all\n              // the same encoding we'd get from a history.pushState/window.location read\n              // without having to touch history\n\n              nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n              userReplace = opts && opts.replace != null ? opts.replace : undefined;\n              historyAction = Action.Push;\n\n              if (userReplace === true) {\n                historyAction = Action.Replace;\n              } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n                // By default on submissions to the current location we REPLACE so that\n                // users don't have to double-click the back button to get to the prior\n                // location.  If the user redirects to a different location from the\n                // action/loader this will be ignored and the redirect will be a PUSH\n                historyAction = Action.Replace;\n              }\n\n              preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n              blockerKey = shouldBlockNavigation({\n                currentLocation: currentLocation,\n                nextLocation: nextLocation,\n                historyAction: historyAction\n              });\n\n              if (!blockerKey) {\n                _context2.next = 15;\n                break;\n              }\n\n              // Put the blocker into a blocked state\n              updateBlocker(blockerKey, {\n                state: \"blocked\",\n                location: nextLocation,\n                proceed: function proceed() {\n                  updateBlocker(blockerKey, {\n                    state: \"proceeding\",\n                    proceed: undefined,\n                    reset: undefined,\n                    location: nextLocation\n                  }); // Send the same navigation through\n\n                  navigate(to, opts);\n                },\n                reset: function reset() {\n                  deleteBlocker(blockerKey);\n                  updateState({\n                    blockers: new Map(state.blockers)\n                  });\n                }\n              });\n              return _context2.abrupt(\"return\");\n\n            case 15:\n              _context2.next = 17;\n              return startNavigation(historyAction, nextLocation, {\n                submission: submission,\n                // Send through the formData serialization error if we have one so we can\n                // render at the right error boundary after we match routes\n                pendingError: error,\n                preventScrollReset: preventScrollReset,\n                replace: opts && opts.replace\n              });\n\n            case 17:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(historyAction, location, opts) {\n      var routesToUse, loadingNavigation, matches, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Abort any in-progress navigations and start a new one. Unset any ongoing\n              // uninterrupted revalidations unless told otherwise, since we want this\n              // new navigation to update history normally\n              pendingNavigationController && pendingNavigationController.abort();\n              pendingNavigationController = null;\n              pendingAction = historyAction;\n              isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n              // and track whether we should reset scroll on completion\n\n              saveScrollPosition(state.location, state.matches);\n              pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              loadingNavigation = opts && opts.overrideNavigation;\n              matches = matchRoutes(routesToUse, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n              if (matches) {\n                _context3.next = 15;\n                break;\n              }\n\n              _error = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch2 = getShortCircuitMatches(routesToUse), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n\n              cancelActiveDeferreds();\n              completeNavigation(location, {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route.id, _error)\n              });\n              return _context3.abrupt(\"return\");\n\n            case 15:\n              if (!(isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {\n                _context3.next = 18;\n                break;\n              }\n\n              completeNavigation(location, {\n                matches: matches\n              });\n              return _context3.abrupt(\"return\");\n\n            case 18:\n              // Create a controller/Request for this navigation\n              pendingNavigationController = new AbortController();\n              request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n\n              if (!(opts && opts.pendingError)) {\n                _context3.next = 24;\n                break;\n              }\n\n              // If we have a pendingError, it means the user attempted a GET submission\n              // with binary FormData so assign here and skip to handleLoaders.  That\n              // way we handle calling loaders above the boundary etc.  It's not really\n              // different from an actionError in that sense.\n              pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n              _context3.next = 35;\n              break;\n\n            case 24:\n              if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n                _context3.next = 35;\n                break;\n              }\n\n              _context3.next = 27;\n              return handleAction(request, location, opts.submission, matches, {\n                replace: opts.replace\n              });\n\n            case 27:\n              actionOutput = _context3.sent;\n\n              if (!actionOutput.shortCircuited) {\n                _context3.next = 30;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 30:\n              pendingActionData = actionOutput.pendingActionData;\n              pendingError = actionOutput.pendingActionError;\n              navigation = _extends({\n                state: \"loading\",\n                location: location\n              }, opts.submission);\n              loadingNavigation = navigation; // Create a GET request for the loaders\n\n              request = new Request(request.url, {\n                signal: request.signal\n              });\n\n            case 35:\n              _context3.next = 37;\n              return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n            case 37:\n              _yield$handleLoaders = _context3.sent;\n              shortCircuited = _yield$handleLoaders.shortCircuited;\n              loaderData = _yield$handleLoaders.loaderData;\n              errors = _yield$handleLoaders.errors;\n\n              if (!shortCircuited) {\n                _context3.next = 43;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 43:\n              // Clean up now that the action/loaders have completed.  Don't clean up if\n              // we short circuited because pendingNavigationController will have already\n              // been assigned to a new controller for the next navigation\n              pendingNavigationController = null;\n              completeNavigation(location, _extends({\n                matches: matches\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}, {\n                loaderData: loaderData,\n                errors: errors\n              }));\n\n            case 45:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, replace, boundaryMatch;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              interruptActiveLoads(); // Put us in a submitting state\n\n              navigation = _extends({\n                state: \"submitting\",\n                location: location\n              }, submission);\n              updateState({\n                navigation: navigation\n              }); // Call our action and get the result\n\n              actionMatch = getTargetMatch(matches, location);\n\n              if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n                _context4.next = 8;\n                break;\n              }\n\n              result = {\n                type: ResultType.error,\n                error: getInternalRouterError(405, {\n                  method: request.method,\n                  pathname: location.pathname,\n                  routeId: actionMatch.route.id\n                })\n              };\n              _context4.next = 13;\n              break;\n\n            case 8:\n              _context4.next = 10;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, detectErrorBoundary, router.basename);\n\n            case 10:\n              result = _context4.sent;\n\n              if (!request.signal.aborted) {\n                _context4.next = 13;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context4.next = 18;\n                break;\n              }\n\n              if (opts && opts.replace != null) {\n                replace = opts.replace;\n              } else {\n                // If the user didn't explicity indicate replace behavior, replace if\n                // we redirected to the exact same location we're currently at to avoid\n                // double back-buttons\n                replace = result.location === state.location.pathname + state.location.search;\n              }\n\n              _context4.next = 17;\n              return startRedirectNavigation(state, result, {\n                submission: submission,\n                replace: replace\n              });\n\n            case 17:\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 18:\n              if (!isErrorResult(result)) {\n                _context4.next = 22;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n              // action threw an error that'll be rendered in an errorElement, we fall\n              // back to PUSH so that the user can use the back button to get back to\n              // the pre-submission form location to try again\n\n              if ((opts && opts.replace) !== true) {\n                pendingAction = Action.Push;\n              }\n\n              return _context4.abrupt(\"return\", {\n                // Send back an empty object we can use to clear out any prior actionData\n                pendingActionData: {},\n                pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n\n            case 22:\n              if (!isDeferredResult(result)) {\n                _context4.next = 24;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n            case 24:\n              return _context4.abrupt(\"return\", {\n                pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n              });\n\n            case 25:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, activeSubmission, routesToUse, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, actionData, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Figure out the right navigation we want to use for data loading\n              loadingNavigation = overrideNavigation;\n\n              if (!loadingNavigation) {\n                navigation = _extends({\n                  state: \"loading\",\n                  location: location,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                }, submission);\n                loadingNavigation = navigation;\n              } // If this was a redirect from an action we don't have a \"submission\" but\n              // we have it on the loading navigation so use that if available\n\n\n              activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n                formMethod: loadingNavigation.formMethod,\n                formAction: loadingNavigation.formAction,\n                formData: loadingNavigation.formData,\n                formEncType: loadingNavigation.formEncType\n              } : undefined;\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, pendingActionData, pendingError), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n              // about to reload.  Note that if this is an action reload we would have\n              // already cancelled all pending deferreds so this would be a no-op\n\n              cancelActiveDeferreds(function (routeId) {\n                return !(matches && matches.some(function (m) {\n                  return m.route.id === routeId;\n                })) || matchesToLoad && matchesToLoad.some(function (m) {\n                  return m.route.id === routeId;\n                });\n              }); // Short circuit if we have no loaders to run\n\n              if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n                _context5.next = 9;\n                break;\n              }\n\n              completeNavigation(location, _extends({\n                matches: matches,\n                loaderData: {},\n                // Commit pending error if we're short circuiting\n                errors: pendingError || null\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}));\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 9:\n              // If this is an uninterrupted revalidation, we remain in our current idle\n              // state.  If not, we need to switch to our loading state and load data,\n              // preserving any new action data or existing action data (in the case of\n              // a revalidation interrupting an actionReload)\n              if (!isUninterruptedRevalidation) {\n                revalidatingFetchers.forEach(function (rf) {\n                  var fetcher = state.fetchers.get(rf.key);\n                  var revalidatingFetcher = {\n                    state: \"loading\",\n                    data: fetcher && fetcher.data,\n                    formMethod: undefined,\n                    formAction: undefined,\n                    formEncType: undefined,\n                    formData: undefined,\n                    \" _hasFetcherDoneAnything \": true\n                  };\n                  state.fetchers.set(rf.key, revalidatingFetcher);\n                });\n                actionData = pendingActionData || state.actionData;\n                updateState(_extends({\n                  navigation: loadingNavigation\n                }, actionData ? Object.keys(actionData).length === 0 ? {\n                  actionData: null\n                } : {\n                  actionData: actionData\n                } : {}, revalidatingFetchers.length > 0 ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n              }\n\n              pendingNavigationLoadId = ++incrementingLoadId;\n              revalidatingFetchers.forEach(function (rf) {\n                return fetchControllers.set(rf.key, pendingNavigationController);\n              });\n              _context5.next = 14;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n            case 14:\n              _yield$callLoadersAnd = _context5.sent;\n              results = _yield$callLoadersAnd.results;\n              loaderResults = _yield$callLoadersAnd.loaderResults;\n              fetcherResults = _yield$callLoadersAnd.fetcherResults;\n\n              if (!request.signal.aborted) {\n                _context5.next = 20;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 20:\n              // Clean up _after_ loaders have completed.  Don't clean up if we short\n              // circuited because fetchControllers would have been aborted and\n              // reassigned to new controllers for the next navigation\n              revalidatingFetchers.forEach(function (rf) {\n                return fetchControllers.delete(rf.key);\n              }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context5.next = 26;\n                break;\n              }\n\n              _context5.next = 25;\n              return startRedirectNavigation(state, redirect, {\n                replace: replace\n              });\n\n            case 25:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 26:\n              // Process and commit output from loaders\n              _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n\n              activeDeferreds.forEach(function (deferredData, routeId) {\n                deferredData.subscribe(function (aborted) {\n                  // Note: No need to updateState here since the TrackedPromise on\n                  // loaderData is stable across resolve/reject\n                  // Remove this instance if we were aborted or if promises have settled\n                  if (aborted || deferredData.done) {\n                    activeDeferreds.delete(routeId);\n                  }\n                });\n              });\n              markFetchRedirectsDone();\n              didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n              return _context5.abrupt(\"return\", _extends({\n                loaderData: loaderData,\n                errors: errors\n              }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n\n            case 31:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    var matches = matchRoutes(routesToUse, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts, true),\n        path = _normalizeNavigateOpt.path,\n        submission = _normalizeNavigateOpt.submission;\n\n    var match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId: routeId,\n      path: path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24, _x25) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, routeId, path, match, requestMatches, submission) {\n      var _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, nextLocation, revalidationRequest, routesToUse, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              interruptActiveLoads();\n              fetchLoadMatches.delete(key);\n\n              if (!(!match.route.action && !match.route.lazy)) {\n                _context6.next = 6;\n                break;\n              }\n\n              _error2 = getInternalRouterError(405, {\n                method: submission.formMethod,\n                pathname: path,\n                routeId: routeId\n              });\n              setFetcherError(key, routeId, _error2);\n              return _context6.abrupt(\"return\");\n\n            case 6:\n              // Put this fetcher into it's submitting state\n              existingFetcher = state.fetchers.get(key);\n              fetcher = _extends({\n                state: \"submitting\"\n              }, submission, {\n                data: existingFetcher && existingFetcher.data,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, fetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the action for the fetcher\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n              fetchControllers.set(key, abortController);\n              _context6.next = 15;\n              return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, detectErrorBoundary, router.basename);\n\n            case 15:\n              actionResult = _context6.sent;\n\n              if (!fetchRequest.signal.aborted) {\n                _context6.next = 19;\n                break;\n              }\n\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-submit which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 19:\n              if (!isRedirectResult(actionResult)) {\n                _context6.next = 26;\n                break;\n              }\n\n              fetchControllers.delete(key);\n              fetchRedirectIds.add(key);\n              loadingFetcher = _extends({\n                state: \"loading\"\n              }, submission, {\n                data: undefined,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, actionResult, {\n                isFetchActionRedirect: true\n              }));\n\n            case 26:\n              if (!isErrorResult(actionResult)) {\n                _context6.next = 29;\n                break;\n              }\n\n              setFetcherError(key, routeId, actionResult.error);\n              return _context6.abrupt(\"return\");\n\n            case 29:\n              if (!isDeferredResult(actionResult)) {\n                _context6.next = 31;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n            case 31:\n              // Start the data load for current matches, or the next location if we're\n              // in the middle of a navigation\n              nextLocation = state.navigation.location || state.location;\n              revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, init.basename) : state.matches;\n              invariant(matches, \"Didn't find any matches after fetcher action\");\n              loadId = ++incrementingLoadId;\n              fetchReloadIds.set(key, loadId);\n              loadFetcher = _extends({\n                state: \"loading\",\n                data: actionResult.data\n              }, submission, {\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadFetcher);\n              _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, _defineProperty({}, match.route.id, actionResult.data), undefined // No need to send through errors since we short circuit above\n              ), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n              // current fetcher which we want to keep in it's current loading state which\n              // contains it's action submission info + action data\n\n              revalidatingFetchers.filter(function (rf) {\n                return rf.key !== key;\n              }).forEach(function (rf) {\n                var staleKey = rf.key;\n                var existingFetcher = state.fetchers.get(staleKey);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: existingFetcher && existingFetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined,\n                  \" _hasFetcherDoneAnything \": true\n                };\n                state.fetchers.set(staleKey, revalidatingFetcher);\n                fetchControllers.set(staleKey, abortController);\n              });\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              _context6.next = 45;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n            case 45:\n              _yield$callLoadersAnd2 = _context6.sent;\n              results = _yield$callLoadersAnd2.results;\n              loaderResults = _yield$callLoadersAnd2.loaderResults;\n              fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n\n              if (!abortController.signal.aborted) {\n                _context6.next = 51;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 51:\n              fetchReloadIds.delete(key);\n              fetchControllers.delete(key);\n              revalidatingFetchers.forEach(function (r) {\n                return fetchControllers.delete(r.key);\n              });\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context6.next = 57;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, redirect));\n\n            case 57:\n              // Process and commit output from loaders\n              _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n              doneFetcher = {\n                state: \"idle\",\n                data: actionResult.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(key, doneFetcher);\n              didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n              // more recent than the navigation, we want the newer data so abort the\n              // navigation and complete it with the fetcher data\n\n              if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n                invariant(pendingAction, \"Expected pending action\");\n                pendingNavigationController && pendingNavigationController.abort();\n                completeNavigation(state.navigation.location, {\n                  matches: matches,\n                  loaderData: loaderData,\n                  errors: errors,\n                  fetchers: new Map(state.fetchers)\n                });\n              } else {\n                // otherwise just update with the fetcher data, preserving any existing\n                // loaderData for loaders that did not need to reload.  We have to\n                // manually merge here since we aren't going through completeNavigation\n                updateState(_extends({\n                  errors: errors,\n                  loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n                }, didAbortFetchLoads ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n                isRevalidationRequired = false;\n              }\n\n            case 62:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n\n  function handleFetcherLoader(_x26, _x27, _x28, _x29, _x30, _x31) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, routeId, path, match, matches, submission) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n              loadingFetcher = _extends({\n                state: \"loading\",\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              }, submission, {\n                data: existingFetcher && existingFetcher.data,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the loader for this fetcher route match\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n              fetchControllers.set(key, abortController);\n              _context7.next = 9;\n              return callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, detectErrorBoundary, router.basename);\n\n            case 9:\n              result = _context7.sent;\n\n              if (!isDeferredResult(result)) {\n                _context7.next = 17;\n                break;\n              }\n\n              _context7.next = 13;\n              return resolveDeferredData(result, fetchRequest.signal, true);\n\n            case 13:\n              _context7.t0 = _context7.sent;\n\n              if (_context7.t0) {\n                _context7.next = 16;\n                break;\n              }\n\n              _context7.t0 = result;\n\n            case 16:\n              result = _context7.t0;\n\n            case 17:\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-load which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              if (!fetchRequest.signal.aborted) {\n                _context7.next = 20;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 20:\n              if (!isRedirectResult(result)) {\n                _context7.next = 24;\n                break;\n              }\n\n              _context7.next = 23;\n              return startRedirectNavigation(state, result);\n\n            case 23:\n              return _context7.abrupt(\"return\");\n\n            case 24:\n              if (!isErrorResult(result)) {\n                _context7.next = 29;\n                break;\n              }\n\n              boundaryMatch = findNearestBoundary(state.matches, routeId);\n              state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n              // do we need to behave any differently with our non-redirect errors?\n              // What if it was a non-redirect Response?\n\n              updateState({\n                fetchers: new Map(state.fetchers),\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n              return _context7.abrupt(\"return\");\n\n            case 29:\n              invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n              doneFetcher = {\n                state: \"idle\",\n                data: result.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(key, doneFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n\n            case 33:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n\n  function startRedirectNavigation(_x32, _x33, _x34) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(state, redirect, _temp) {\n      var _window, _ref6, submission, replace, isFetchActionRedirect, redirectLocation, url, isDifferentBasename, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, formData;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _ref6 = _temp === void 0 ? {} : _temp, submission = _ref6.submission, replace = _ref6.replace, isFetchActionRedirect = _ref6.isFetchActionRedirect;\n\n              if (redirect.revalidate) {\n                isRevalidationRequired = true;\n              }\n\n              redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n              _extends({\n                _isRedirect: true\n              }, isFetchActionRedirect ? {\n                _isFetchActionRedirect: true\n              } : {}));\n              invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n              if (!(ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\")) {\n                _context8.next = 10;\n                break;\n              }\n\n              url = init.history.createURL(redirect.location);\n              isDifferentBasename = stripBasename(url.pathname, init.basename || \"/\") == null;\n\n              if (!(window.location.origin !== url.origin || isDifferentBasename)) {\n                _context8.next = 10;\n                break;\n              }\n\n              if (replace) {\n                window.location.replace(redirect.location);\n              } else {\n                window.location.assign(redirect.location);\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 10:\n              // There's no need to abort on redirects, since we don't detect the\n              // redirect until the action/loaders have settled\n              pendingNavigationController = null;\n              redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n              // state.navigation\n\n              _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType, formData = _state$navigation.formData;\n\n              if (!submission && formMethod && formAction && formData && formEncType) {\n                submission = {\n                  formMethod: formMethod,\n                  formAction: formAction,\n                  formEncType: formEncType,\n                  formData: formData\n                };\n              } // If this was a 307/308 submission we want to preserve the HTTP method and\n              // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n              // redirected location\n\n\n              if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod))) {\n                _context8.next = 19;\n                break;\n              }\n\n              _context8.next = 17;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                submission: _extends({}, submission, {\n                  formAction: redirect.location\n                }),\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n\n            case 17:\n              _context8.next = 21;\n              break;\n\n            case 19:\n              _context8.next = 21;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                overrideNavigation: {\n                  state: \"loading\",\n                  location: redirectLocation,\n                  formMethod: submission ? submission.formMethod : undefined,\n                  formAction: submission ? submission.formAction : undefined,\n                  formEncType: submission ? submission.formEncType : undefined,\n                  formData: submission ? submission.formData : undefined\n                },\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n\n            case 21:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function callLoadersAndMaybeResolveData(_x35, _x36, _x37, _x38, _x39) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, manifest, detectErrorBoundary, router.basename);\n              })), _toConsumableArray(fetchersToLoad.map(function (f) {\n                if (f.matches && f.match) {\n                  return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, request.signal), f.match, f.matches, manifest, detectErrorBoundary, router.basename);\n                } else {\n                  var _error3 = {\n                    type: ResultType.error,\n                    error: getInternalRouterError(404, {\n                      pathname: f.path\n                    })\n                  };\n                  return _error3;\n                }\n              }))));\n\n            case 2:\n              results = _context9.sent;\n              loaderResults = results.slice(0, matchesToLoad.length);\n              fetcherResults = results.slice(matchesToLoad.length);\n              _context9.next = 7;\n              return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (f) {\n                return f.match;\n              }), fetcherResults, request.signal, true)]);\n\n            case 7:\n              return _context9.abrupt(\"return\", {\n                results: results,\n                loaderResults: loaderResults,\n                fetcherResults: fetcherResults\n              });\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    var _iterator3 = _createForOfIteratorHelper(keys),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n\n    var _iterator4 = _createForOfIteratorHelper(fetchRedirectIds),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var key = _step4.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n\n    var _iterator5 = _createForOfIteratorHelper(fetchReloadIds),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _step5$value = _slicedToArray(_step5.value, 2),\n            key = _step5$value[0],\n            id = _step5$value[1];\n\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    var currentLocation = _ref2.currentLocation,\n        nextLocation = _ref2.nextLocation,\n        historyAction = _ref2.historyAction;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    var entries = Array.from(blockerFunctions.entries());\n\n    var _entries = _slicedToArray(entries[entries.length - 1], 2),\n        blockerKey = _entries[0],\n        blockerFunction = _entries[1];\n\n    var blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes: _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var manifest = {};\n  var detectErrorBoundary = (opts == null ? void 0 : opts.detectErrorBoundary) || defaultDetectErrorBoundary;\n  var dataRoutes = convertRoutesToDataRoutes(routes, detectErrorBoundary, undefined, manifest);\n  var basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  function query(_x40, _x41) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(request, _temp2) {\n      var _ref7, requestContext, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error4, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _ref7 = _temp2 === void 0 ? {} : _temp2, requestContext = _ref7.requestContext;\n              url = new URL(request.url);\n              method = request.method.toLowerCase();\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"head\")) {\n                _context10.next = 11;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: method\n              });\n              _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: methodNotAllowedMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, route.id, error),\n                statusCode: error.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 11:\n              if (matches) {\n                _context10.next = 15;\n                break;\n              }\n\n              _error4 = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: notFoundMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, _route2.id, _error4),\n                statusCode: _error4.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 15:\n              _context10.next = 17;\n              return queryImpl(request, location, matches, requestContext);\n\n            case 17:\n              result = _context10.sent;\n\n              if (!isResponse(result)) {\n                _context10.next = 20;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", result);\n\n            case 20:\n              return _context10.abrupt(\"return\", _extends({\n                location: location,\n                basename: basename\n              }, result));\n\n            case 21:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  function queryRoute(_x42, _x43) {\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(request, _temp3) {\n      var _ref8, routeId, requestContext, url, method, location, matches, match, result, error, _result$activeDeferre, data;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _ref8 = _temp3 === void 0 ? {} : _temp3, routeId = _ref8.routeId, requestContext = _ref8.requestContext;\n              url = new URL(request.url);\n              method = request.method.toLowerCase();\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"head\" && method !== \"options\")) {\n                _context11.next = 9;\n                break;\n              }\n\n              throw getInternalRouterError(405, {\n                method: method\n              });\n\n            case 9:\n              if (matches) {\n                _context11.next = 11;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 11:\n              match = routeId ? matches.find(function (m) {\n                return m.route.id === routeId;\n              }) : getTargetMatch(matches, location);\n\n              if (!(routeId && !match)) {\n                _context11.next = 16;\n                break;\n              }\n\n              throw getInternalRouterError(403, {\n                pathname: location.pathname,\n                routeId: routeId\n              });\n\n            case 16:\n              if (match) {\n                _context11.next = 18;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 18:\n              _context11.next = 20;\n              return queryImpl(request, location, matches, requestContext, match);\n\n            case 20:\n              result = _context11.sent;\n\n              if (!isResponse(result)) {\n                _context11.next = 23;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", result);\n\n            case 23:\n              error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n              if (!(error !== undefined)) {\n                _context11.next = 26;\n                break;\n              }\n\n              throw error;\n\n            case 26:\n              if (!result.actionData) {\n                _context11.next = 28;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", Object.values(result.actionData)[0]);\n\n            case 28:\n              if (!result.loaderData) {\n                _context11.next = 32;\n                break;\n              }\n\n              data = Object.values(result.loaderData)[0];\n\n              if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n                data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n              }\n\n              return _context11.abrupt(\"return\", data);\n\n            case 32:\n              return _context11.abrupt(\"return\", undefined);\n\n            case 33:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function queryImpl(_x44, _x45, _x46, _x47, _x48) {\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(request, location, matches, requestContext, routeMatch) {\n      var _result, result;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n              _context12.prev = 1;\n\n              if (!isMutationMethod(request.method.toLowerCase())) {\n                _context12.next = 7;\n                break;\n              }\n\n              _context12.next = 5;\n              return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n\n            case 5:\n              _result = _context12.sent;\n              return _context12.abrupt(\"return\", _result);\n\n            case 7:\n              _context12.next = 9;\n              return loadRouteData(request, matches, requestContext, routeMatch);\n\n            case 9:\n              result = _context12.sent;\n              return _context12.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n                actionData: null,\n                actionHeaders: {}\n              }));\n\n            case 13:\n              _context12.prev = 13;\n              _context12.t0 = _context12[\"catch\"](1);\n\n              if (!isQueryRouteResponse(_context12.t0)) {\n                _context12.next = 19;\n                break;\n              }\n\n              if (!(_context12.t0.type === ResultType.error && !isRedirectResponse(_context12.t0.response))) {\n                _context12.next = 18;\n                break;\n              }\n\n              throw _context12.t0.response;\n\n            case 18:\n              return _context12.abrupt(\"return\", _context12.t0.response);\n\n            case 19:\n              if (!isRedirectResponse(_context12.t0)) {\n                _context12.next = 21;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", _context12.t0);\n\n            case 21:\n              throw _context12.t0;\n\n            case 22:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function submit(_x49, _x50, _x51, _x52, _x53) {\n    return _submit.apply(this, arguments);\n  }\n\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(request, matches, actionMatch, requestContext, isRouteRequest) {\n      var result, error, method, _error5, boundaryMatch, _context13, loaderRequest, context;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n                _context14.next = 7;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: actionMatch.route.id\n              });\n\n              if (!isRouteRequest) {\n                _context14.next = 4;\n                break;\n              }\n\n              throw error;\n\n            case 4:\n              result = {\n                type: ResultType.error,\n                error: error\n              };\n              _context14.next = 13;\n              break;\n\n            case 7:\n              _context14.next = 9;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, detectErrorBoundary, basename, true, isRouteRequest, requestContext);\n\n            case 9:\n              result = _context14.sent;\n\n              if (!request.signal.aborted) {\n                _context14.next = 13;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context14.next = 15;\n                break;\n              }\n\n              throw new Response(null, {\n                status: result.status,\n                headers: {\n                  Location: result.location\n                }\n              });\n\n            case 15:\n              if (!isDeferredResult(result)) {\n                _context14.next = 20;\n                break;\n              }\n\n              _error5 = getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n              if (!isRouteRequest) {\n                _context14.next = 19;\n                break;\n              }\n\n              throw _error5;\n\n            case 19:\n              result = {\n                type: ResultType.error,\n                error: _error5\n              };\n\n            case 20:\n              if (!isRouteRequest) {\n                _context14.next = 24;\n                break;\n              }\n\n              if (!isErrorResult(result)) {\n                _context14.next = 23;\n                break;\n              }\n\n              throw result.error;\n\n            case 23:\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                errors: null,\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 200,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 24:\n              if (!isErrorResult(result)) {\n                _context14.next = 30;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              _context14.next = 28;\n              return loadRouteData(request, matches, requestContext, undefined, _defineProperty({}, boundaryMatch.route.id, result.error));\n\n            case 28:\n              _context13 = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, _context13, {\n                statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n                actionData: null,\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 30:\n              // Create a GET request for the loaders\n              loaderRequest = new Request(request.url, {\n                headers: request.headers,\n                redirect: request.redirect,\n                signal: request.signal\n              });\n              _context14.next = 33;\n              return loadRouteData(loaderRequest, matches, requestContext);\n\n            case 33:\n              context = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n                statusCode: result.statusCode\n              } : {}, {\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 35:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n\n  function loadRouteData(_x54, _x55, _x56, _x57, _x58) {\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(request, matches, requestContext, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime.wrap(function _callee14$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n              if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy))) {\n                _context15.next = 3;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: routeMatch == null ? void 0 : routeMatch.route.id\n              });\n\n            case 3:\n              requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n              matchesToLoad = requestMatches.filter(function (m) {\n                return m.route.loader || m.route.lazy;\n              }); // Short circuit if we have no loaders to run (query())\n\n              if (!(matchesToLoad.length === 0)) {\n                _context15.next = 7;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", {\n                matches: matches,\n                // Add a null for all matched routes for proper revalidation on the client\n                loaderData: matches.reduce(function (acc, m) {\n                  return Object.assign(acc, _defineProperty({}, m.route.id, null));\n                }, {}),\n                errors: pendingActionError || null,\n                statusCode: 200,\n                loaderHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 7:\n              _context15.next = 9;\n              return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, manifest, detectErrorBoundary, basename, true, isRouteRequest, requestContext);\n              })));\n\n            case 9:\n              results = _context15.sent;\n\n              if (!request.signal.aborted) {\n                _context15.next = 13;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 13:\n              // Process and commit output from loaders\n              activeDeferreds = new Map();\n              context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n              executedLoaders = new Set(matchesToLoad.map(function (match) {\n                return match.route.id;\n              }));\n              matches.forEach(function (match) {\n                if (!executedLoaders.has(match.route.id)) {\n                  context.loaderData[match.route.id] = null;\n                }\n              });\n              return _context15.abrupt(\"return\", _extends({}, context, {\n                matches: matches,\n                activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n              }));\n\n            case 18:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  var submission;\n\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path: path,\n        submission: submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  var parsedPath = parsePath(path);\n  var searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  var currentUrl = history.createURL(state.location);\n  var nextUrl = history.createURL(location);\n  var defaultShouldRevalidate = // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    })) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    var currentRouteMatch = state.matches[index];\n    var nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl: currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl: nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches.forEach(function (f, key) {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(function (m) {\n      return m.route.id === f.routeId;\n    })) {\n      return;\n    }\n\n    var fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push(_extends({\n        key: key\n      }, f, {\n        matches: null,\n        match: null\n      }));\n      return;\n    }\n\n    var fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push(_extends({\n        key: key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n\n\n    var shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl: currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl: nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate\n    }));\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push(_extends({\n        key: key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    var routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nfunction loadLazyRouteModule(_x59, _x60, _x61) {\n  return _loadLazyRouteModule.apply(this, arguments);\n}\n\nfunction _loadLazyRouteModule() {\n  _loadLazyRouteModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(route, detectErrorBoundary, manifest) {\n    var lazyRoute, routeToUpdate, routeUpdates, lazyRouteProperty, staticRouteValue, isPropertyStaticallyDefined;\n    return _regeneratorRuntime.wrap(function _callee15$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            if (route.lazy) {\n              _context16.next = 2;\n              break;\n            }\n\n            return _context16.abrupt(\"return\");\n\n          case 2:\n            _context16.next = 4;\n            return route.lazy();\n\n          case 4:\n            lazyRoute = _context16.sent;\n\n            if (route.lazy) {\n              _context16.next = 7;\n              break;\n            }\n\n            return _context16.abrupt(\"return\");\n\n          case 7:\n            routeToUpdate = manifest[route.id];\n            invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n            // we could yet be sitting on this route as we can't get there without\n            // resolving lazy() first.\n            //\n            // This is different than the HMR \"update\" use-case where we may actively be\n            // on the route being updated.  The main concern boils down to \"does this\n            // mutation affect any ongoing navigations or any current state.matches\n            // values?\".  If not, it should be safe to update in place.\n\n            routeUpdates = {};\n\n            for (lazyRouteProperty in lazyRoute) {\n              staticRouteValue = routeToUpdate[lazyRouteProperty];\n              isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n              // on the route updates\n              lazyRouteProperty !== \"hasErrorBoundary\";\n              warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n              if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n                routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n              }\n            } // Mutate the route with the provided updates.  Do this first so we pass\n            // the updated version to detectErrorBoundary\n\n\n            Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n            // updates and remove the `lazy` function so we don't resolve the lazy\n            // route again.\n\n            Object.assign(routeToUpdate, {\n              // To keep things framework agnostic, we use the provided\n              // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n              // property since the logic will differ between frameworks.\n              hasErrorBoundary: detectErrorBoundary(_extends({}, routeToUpdate)),\n              lazy: undefined\n            });\n\n          case 13:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee15);\n  }));\n  return _loadLazyRouteModule.apply(this, arguments);\n}\n\nfunction callLoaderOrAction(_x62, _x63, _x64, _x65, _x66, _x67, _x68, _x69, _x70, _x71) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(type, request, match, matches, manifest, detectErrorBoundary, basename, isStaticRequest, isRouteRequest, requestContext) {\n    var resultType, result, onReject, runHandler, handler, values, status, location, activeMatches, routePathnames, resolvedLocation, path, currentUrl, url, isSameBasename, data, contentType, _result$init, _result$init2;\n\n    return _regeneratorRuntime.wrap(function _callee16$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            if (basename === void 0) {\n              basename = \"/\";\n            }\n\n            if (isStaticRequest === void 0) {\n              isStaticRequest = false;\n            }\n\n            if (isRouteRequest === void 0) {\n              isRouteRequest = false;\n            }\n\n            runHandler = function runHandler(handler) {\n              // Setup a promise we can race against so that abort signals short circuit\n              var reject;\n              var abortPromise = new Promise(function (_, r) {\n                return reject = r;\n              });\n\n              onReject = function onReject() {\n                return reject();\n              };\n\n              request.signal.addEventListener(\"abort\", onReject);\n              return Promise.race([handler({\n                request: request,\n                params: match.params,\n                context: requestContext\n              }), abortPromise]);\n            };\n\n            _context17.prev = 4;\n            handler = match.route[type];\n\n            if (!match.route.lazy) {\n              _context17.next = 30;\n              break;\n            }\n\n            if (!handler) {\n              _context17.next = 14;\n              break;\n            }\n\n            _context17.next = 10;\n            return Promise.all([runHandler(handler), loadLazyRouteModule(match.route, detectErrorBoundary, manifest)]);\n\n          case 10:\n            values = _context17.sent;\n            result = values[0];\n            _context17.next = 28;\n            break;\n\n          case 14:\n            _context17.next = 16;\n            return loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n\n          case 16:\n            handler = match.route[type];\n\n            if (!handler) {\n              _context17.next = 23;\n              break;\n            }\n\n            _context17.next = 20;\n            return runHandler(handler);\n\n          case 20:\n            result = _context17.sent;\n            _context17.next = 28;\n            break;\n\n          case 23:\n            if (!(type === \"action\")) {\n              _context17.next = 27;\n              break;\n            }\n\n            throw getInternalRouterError(405, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: match.route.id\n            });\n\n          case 27:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.data,\n              data: undefined\n            });\n\n          case 28:\n            _context17.next = 34;\n            break;\n\n          case 30:\n            invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n            _context17.next = 33;\n            return runHandler(handler);\n\n          case 33:\n            result = _context17.sent;\n\n          case 34:\n            invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n            _context17.next = 41;\n            break;\n\n          case 37:\n            _context17.prev = 37;\n            _context17.t0 = _context17[\"catch\"](4);\n            resultType = ResultType.error;\n            result = _context17.t0;\n\n          case 41:\n            _context17.prev = 41;\n\n            if (onReject) {\n              request.signal.removeEventListener(\"abort\", onReject);\n            }\n\n            return _context17.finish(41);\n\n          case 44:\n            if (!isResponse(result)) {\n              _context17.next = 69;\n              break;\n            }\n\n            status = result.status; // Process redirects\n\n            if (!redirectStatusCodes.has(status)) {\n              _context17.next = 54;\n              break;\n            }\n\n            location = result.headers.get(\"Location\");\n            invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n            if (!ABSOLUTE_URL_REGEX.test(location)) {\n              activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n              routePathnames = getPathContributingMatches(activeMatches).map(function (match) {\n                return match.pathnameBase;\n              });\n              resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n              invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n              if (basename) {\n                path = resolvedLocation.pathname;\n                resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n              }\n\n              location = createPath(resolvedLocation);\n            } else if (!isStaticRequest) {\n              // Strip off the protocol+origin for same-origin + same-basename absolute\n              // redirects. If this is a static request, we can let it go back to the\n              // browser as-is\n              currentUrl = new URL(request.url);\n              url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n              isSameBasename = stripBasename(url.pathname, basename) != null;\n\n              if (url.origin === currentUrl.origin && isSameBasename) {\n                location = url.pathname + url.search + url.hash;\n              }\n            } // Don't process redirects in the router during static requests requests.\n            // Instead, throw the Response and let the server handle it with an HTTP\n            // redirect.  We also update the Location header in place in this flow so\n            // basename and relative routing is taken into account\n\n\n            if (!isStaticRequest) {\n              _context17.next = 53;\n              break;\n            }\n\n            result.headers.set(\"Location\", location);\n            throw result;\n\n          case 53:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.redirect,\n              status: status,\n              location: location,\n              revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n            });\n\n          case 54:\n            if (!isRouteRequest) {\n              _context17.next = 56;\n              break;\n            }\n\n            throw {\n              type: resultType || ResultType.data,\n              response: result\n            };\n\n          case 56:\n            contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n            // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n            if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n              _context17.next = 63;\n              break;\n            }\n\n            _context17.next = 60;\n            return result.json();\n\n          case 60:\n            data = _context17.sent;\n            _context17.next = 66;\n            break;\n\n          case 63:\n            _context17.next = 65;\n            return result.text();\n\n          case 65:\n            data = _context17.sent;\n\n          case 66:\n            if (!(resultType === ResultType.error)) {\n              _context17.next = 68;\n              break;\n            }\n\n            return _context17.abrupt(\"return\", {\n              type: resultType,\n              error: new ErrorResponse(status, result.statusText, data),\n              headers: result.headers\n            });\n\n          case 68:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.data,\n              data: data,\n              statusCode: result.status,\n              headers: result.headers\n            });\n\n          case 69:\n            if (!(resultType === ResultType.error)) {\n              _context17.next = 71;\n              break;\n            }\n\n            return _context17.abrupt(\"return\", {\n              type: resultType,\n              error: result\n            });\n\n          case 71:\n            if (!(result instanceof DeferredData)) {\n              _context17.next = 73;\n              break;\n            }\n\n            return _context17.abrupt(\"return\", {\n              type: ResultType.deferred,\n              deferredData: result,\n              statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n              headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n            });\n\n          case 73:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result\n            });\n\n          case 74:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, _callee16, null, [[4, 37, 41, 44]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n        formEncType = submission.formEncType,\n        formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n\n  var _iterator6 = _createForOfIteratorHelper(formData.entries()),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n          key = _step6$value[0],\n          value = _step6$value[1];\n\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n      searchParams.append(key, value instanceof File ? value.name : value);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n      loaderData = _processRouteLoaderDa.loaderData,\n      errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = revalidatingFetchers[index],\n        key = _revalidatingFetchers.key,\n        match = _revalidatingFetchers.match;\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n\n  var _iterator7 = _createForOfIteratorHelper(matches),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var match = _step7.value;\n      var id = match.route.id;\n\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined && match.route.loader) {\n        // Preserve existing keys not included in newLoaderData and where a loader\n        // wasn't removed by HMR\n        mergedLoaderData[id] = loaderData[id];\n      }\n\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  var _ref11 = _temp4 === void 0 ? {} : _temp4,\n      pathname = _ref11.pathname,\n      routeId = _ref11.routeId,\n      method = _ref11.method,\n      type = _ref11.type;\n\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\n\nfunction resolveDeferredResults(_x72, _x73, _x74, _x75, _x76, _x77) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index, _ret;\n\n    return _regeneratorRuntime.wrap(function _callee17$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(index) {\n              var result, match, currentMatch, isRevalidatingLoader;\n              return _regeneratorRuntime.wrap(function _loop$(_context18) {\n                while (1) {\n                  switch (_context18.prev = _context18.next) {\n                    case 0:\n                      result = results[index];\n                      match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n                      // anything with.  This is for revalidating fetchers where the route was\n                      // removed during HMR\n\n                      if (match) {\n                        _context18.next = 4;\n                        break;\n                      }\n\n                      return _context18.abrupt(\"return\", \"continue\");\n\n                    case 4:\n                      currentMatch = currentMatches.find(function (m) {\n                        return m.route.id === match.route.id;\n                      });\n                      isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n                      if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                        _context18.next = 9;\n                        break;\n                      }\n\n                      _context18.next = 9;\n                      return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                        if (result) {\n                          results[index] = result || results[index];\n                        }\n                      });\n\n                    case 9:\n                    case \"end\":\n                      return _context18.stop();\n                  }\n                }\n              }, _loop);\n            });\n            index = 0;\n\n          case 2:\n            if (!(index < results.length)) {\n              _context19.next = 10;\n              break;\n            }\n\n            return _context19.delegateYield(_loop(index), \"t0\", 4);\n\n          case 4:\n            _ret = _context19.t0;\n\n            if (!(_ret === \"continue\")) {\n              _context19.next = 7;\n              break;\n            }\n\n            return _context19.abrupt(\"continue\", 7);\n\n          case 7:\n            index++;\n            _context19.next = 2;\n            break;\n\n          case 10:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee17);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction resolveDeferredData(_x78, _x79, _x80) {\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime.wrap(function _callee18$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            if (unwrap === void 0) {\n              unwrap = false;\n            }\n\n            _context20.next = 3;\n            return result.deferredData.resolveData(signal);\n\n          case 3:\n            aborted = _context20.sent;\n\n            if (!aborted) {\n              _context20.next = 6;\n              break;\n            }\n\n            return _context20.abrupt(\"return\");\n\n          case 6:\n            if (!unwrap) {\n              _context20.next = 14;\n              break;\n            }\n\n            _context20.prev = 7;\n            return _context20.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.unwrappedData\n            });\n\n          case 11:\n            _context20.prev = 11;\n            _context20.t0 = _context20[\"catch\"](7);\n            return _context20.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context20.t0\n            });\n\n          case 14:\n            return _context20.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.data\n            });\n\n          case 15:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, _callee18, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n      pathname = match.pathname,\n      params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","assign","origin","invariant","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","detectErrorBoundary","parentPath","manifest","treePath","id","join","children","indexRoute","hasErrorBoundary","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","explodeOptionalSegments","exploded","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","prefix","array","isLastSegment","star","starParam","keyMatch","optional","param","pattern","compilePath","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","pendingKeysSet","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","v","k","resolve","size","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","defaultDetectErrorBoundary","Boolean","createRouter","dataRoutes","inFlightDataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","lazyMatches","lazyPromises","loadLazyRouteModule","all","dispose","clear","deleteFetcher","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizeNavigateOptions","submission","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","findNearestBoundary","handleAction","actionOutput","shortCircuited","pendingActionData","pendingActionError","_extends","Request","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getMatchesToLoad","matchesToLoad","revalidatingFetchers","rf","fetcher","revalidatingFetcher","callLoadersAndMaybeResolveData","results","loaderResults","fetcherResults","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp","redirectLocation","_isFetchActionRedirect","_window","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","f","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref2","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","defaultShouldRevalidate","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","isStaticRequest","runHandler","handler","onReject","resultType","activeMatches","resolvedLocation","protocol","isSameBasename","contentType","text","deferred","_result$init","toUpperCase","body","URLSearchParams","File","name","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp4","errorMessage","obj","isRevalidatingLoader","unwrap","resolveData","unwrappedData","getAll","handle","pathMatches"],"sources":["C:\\Users\\Yukina\\OneDrive\\Desktop\\git\\goit-react-hw-05-movies\\node_modules\\@remix-run\\router\\history.ts","C:\\Users\\Yukina\\OneDrive\\Desktop\\git\\goit-react-hw-05-movies\\node_modules\\@remix-run\\router\\utils.ts","C:\\Users\\Yukina\\OneDrive\\Desktop\\git\\goit-react-hw-05-movies\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        hasErrorBoundary: detectErrorBoundary(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          detectErrorBoundary,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultDetectErrorBoundary = (route: AgnosticRouteObject) =>\n  Boolean(route.hasErrorBoundary);\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let detectErrorBoundary =\n    init.detectErrorBoundary || defaultDetectErrorBoundary;\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (state.initialized) {\n      return router;\n    }\n\n    let lazyMatches = state.matches.filter((m) => m.route.lazy);\n\n    if (lazyMatches.length === 0) {\n      // Kick off initial data load if needed.  Use Pop to avoid modifying history\n      startNavigation(HistoryAction.Pop, state.location);\n      return router;\n    }\n\n    // Load lazy modules, then kick off initial data load if needed\n    let lazyPromises = lazyMatches.map((m) =>\n      loadLazyRouteModule(m.route, detectErrorBoundary, manifest)\n    );\n    Promise.all(lazyPromises).then(() => {\n      let initialized =\n        !state.matches.some((m) => m.route.loader) ||\n        init.hydrationData != null;\n      if (initialized) {\n        // We already have required loaderData so we can just set initialized\n        updateState({ initialized: true });\n      } else {\n        // We still need to kick off initial data loads\n        startNavigation(HistoryAction.Pop, state.location);\n      }\n    });\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename =\n        stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          router.basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, request.signal),\n            f.match,\n            f.matches,\n            manifest,\n            detectErrorBoundary,\n            router.basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let detectErrorBoundary =\n    opts?.detectErrorBoundary || defaultDetectErrorBoundary;\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({ key, ...f, matches: null, match: null });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to detectErrorBoundary\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n    // property since the logic will differ between frameworks.\n    hasErrorBoundary: detectErrorBoundary({ ...routeToUpdate }),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, detectErrorBoundary, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: new URL(request.url).pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else {\n      invariant<Function>(\n        handler,\n        `Could not find the ${type} to run on the \"${match.route.id}\" route`\n      );\n\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}