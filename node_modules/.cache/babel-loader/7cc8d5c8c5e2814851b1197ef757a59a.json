{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yukina\\\\OneDrive\\\\Desktop\\\\git\\\\goit-react-hw-05-movies\\\\src\\\\components\\\\MovieCard\\\\MovieCard.jsx\",\n    _s = $RefreshSig$();\n\nimport { useLocation } from 'react-router-dom'; // доступ до параметрів поточного URL\n\nimport PropTypes from 'prop-types';\nimport { Img, List, ListItem, MoreInfoHeader, MoreInfoWrapper, MovieCardContainer, MovieInfo, MovieInfoText, MovieInfoTextBold, MovieName, StyledLink } from './MovieCard.styled'; // додаємо стилі\n\nimport { LoadingIndicator } from 'components/SharedLayout/LoadingDots'; // додаємо індикатор завантаження\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MovieCard = _ref => {\n  _s();\n\n  var _location$state$from, _location$state, _location$state$from2, _location$state2;\n\n  let {\n    movie\n  } = _ref;\n  const {\n    title,\n    release_date,\n    poster_path,\n    vote_average,\n    overview,\n    genres\n  } = movie;\n  const location = useLocation(); // додаємо доступ до параметрів поточного URL\n\n  const releaseDate = new Date(release_date); // перевіряємо чи дата валідна, якщо ні, то виводимо Unknown\n\n  const releaseYear = isNaN(releaseDate) ? 'Unknown' : releaseDate.getFullYear(); // додаємо перевірку на наявність постера\n\n  const posterUrl = poster_path ? `https://image.tmdb.org/t/p/w400/${poster_path}` : 'https://via.placeholder.com/400x600.png?text=Poster+Not+Available'; // додаємо перевірку на наявність рейтингу\n\n  const userScore = vote_average ? `${(vote_average * 10).toFixed(0)}%` : 'Not rated yet'; // додаємо перевірку на наявність заголовку\n\n  if (!title) {\n    return /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MovieCardContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Img, {\n        src: posterUrl,\n        alt: `${title} poster`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MovieInfo, {\n        children: [/*#__PURE__*/_jsxDEV(MovieName, {\n          children: [title !== null && title !== void 0 ? title : 'Unknown', \" (\", releaseYear, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MovieInfoText, {\n          children: [\"User Score: \", userScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MovieInfoText, {\n          children: [/*#__PURE__*/_jsxDEV(MovieInfoTextBold, {\n            children: \"Overview:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), \" \", overview]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), genres && genres.length > 0 && /*#__PURE__*/_jsxDEV(MovieInfoText, {\n          children: [/*#__PURE__*/_jsxDEV(MovieInfoTextBold, {\n            children: \"Genres:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), genres.map(genre => genre.name).join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MoreInfoWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(MoreInfoHeader, {\n        children: \"Additional information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: [/*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(StyledLink, {\n            to: \"cast\",\n            state: {\n              from: (_location$state$from = location === null || location === void 0 ? void 0 : (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.from) !== null && _location$state$from !== void 0 ? _location$state$from : '/'\n            } // додаємо параметр from для повернення на попередню сторінку\n            ,\n            children: \"Cast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(StyledLink, {\n            to: \"reviews\",\n            state: {\n              from: (_location$state$from2 = location === null || location === void 0 ? void 0 : (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.from) !== null && _location$state$from2 !== void 0 ? _location$state$from2 : '/'\n            },\n            children: \"Reviews\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // додаємо перевірку на типи пропсів\n\n\n_s(MovieCard, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n\n_c = MovieCard;\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string.isRequired\n    }))\n  }).isRequired\n};\nexport default MovieCard; // Діма Берестень\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieCard\");","map":{"version":3,"sources":["C:/Users/Yukina/OneDrive/Desktop/git/goit-react-hw-05-movies/src/components/MovieCard/MovieCard.jsx"],"names":["useLocation","PropTypes","Img","List","ListItem","MoreInfoHeader","MoreInfoWrapper","MovieCardContainer","MovieInfo","MovieInfoText","MovieInfoTextBold","MovieName","StyledLink","LoadingIndicator","MovieCard","movie","title","release_date","poster_path","vote_average","overview","genres","location","releaseDate","Date","releaseYear","isNaN","getFullYear","posterUrl","userScore","toFixed","length","map","genre","name","join","from","state","propTypes","shape","string","isRequired","number","arrayOf"],"mappings":"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","sourcesContent":["import { useLocation } from 'react-router-dom'; // доступ до параметрів поточного URL\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Img,\r\n  List,\r\n  ListItem,\r\n  MoreInfoHeader,\r\n  MoreInfoWrapper,\r\n  MovieCardContainer,\r\n  MovieInfo,\r\n  MovieInfoText,\r\n  MovieInfoTextBold,\r\n  MovieName,\r\n  StyledLink,\r\n} from './MovieCard.styled'; // додаємо стилі\r\nimport { LoadingIndicator } from 'components/SharedLayout/LoadingDots'; // додаємо індикатор завантаження\r\n\r\nconst MovieCard = ({ movie }) => {\r\n  const { title, release_date, poster_path, vote_average, overview, genres } =\r\n  movie;\r\n  const location = useLocation(); // додаємо доступ до параметрів поточного URL\r\n  const releaseDate = new Date(release_date);\r\n\r\n  // перевіряємо чи дата валідна, якщо ні, то виводимо Unknown\r\n  const releaseYear = isNaN(releaseDate)\r\n    ? 'Unknown'\r\n    : releaseDate.getFullYear();\r\n\r\n  // додаємо перевірку на наявність постера\r\n  const posterUrl = poster_path\r\n    ? `https://image.tmdb.org/t/p/w400/${poster_path}`\r\n    : 'https://via.placeholder.com/400x600.png?text=Poster+Not+Available';\r\n\r\n  // додаємо перевірку на наявність рейтингу\r\n  const userScore = vote_average\r\n    ? `${(vote_average * 10).toFixed(0)}%`\r\n    : 'Not rated yet';\r\n\r\n  // додаємо перевірку на наявність заголовку\r\n  if (!title) {\r\n    return <LoadingIndicator />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MovieCardContainer>\r\n        <Img src={posterUrl} alt={`${title} poster`} />\r\n\r\n        <MovieInfo>\r\n          <MovieName>\r\n            {title ?? 'Unknown'} ({releaseYear})\r\n          </MovieName>\r\n          <MovieInfoText>User Score: {userScore}</MovieInfoText>\r\n          <MovieInfoText>\r\n            <MovieInfoTextBold>Overview:</MovieInfoTextBold> {overview}\r\n          </MovieInfoText>\r\n\r\n          {/* додаємо перевірку на наявність жанрів */}\r\n          {genres && genres.length > 0 && (\r\n            <MovieInfoText>\r\n              <MovieInfoTextBold>Genres:</MovieInfoTextBold>\r\n              {genres.map(genre => genre.name).join(', ')}\r\n            </MovieInfoText>\r\n          )}\r\n        </MovieInfo>\r\n\r\n      </MovieCardContainer>\r\n\r\n      <MoreInfoWrapper>\r\n        <MoreInfoHeader>Additional information</MoreInfoHeader>\r\n\r\n        <List>\r\n          <ListItem>\r\n            <StyledLink\r\n              to=\"cast\"\r\n              state={{ from: location?.state?.from ?? '/' }} // додаємо параметр from для повернення на попередню сторінку\r\n            >\r\n              Cast\r\n            </StyledLink>\r\n          </ListItem>\r\n\r\n          <ListItem>\r\n            <StyledLink\r\n              to=\"reviews\"\r\n              state={{ from: location?.state?.from ?? '/' }}\r\n            >\r\n              Reviews\r\n            </StyledLink>\r\n          </ListItem>\r\n        </List>\r\n\r\n      </MoreInfoWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\n// додаємо перевірку на типи пропсів\r\nMovieCard.propTypes = {\r\n  movie: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n    release_date: PropTypes.string.isRequired,\r\n    poster_path: PropTypes.string.isRequired,\r\n    vote_average: PropTypes.number,\r\n    overview: PropTypes.string,\r\n    genres: PropTypes.arrayOf(\r\n      PropTypes.shape({ name: PropTypes.string.isRequired })\r\n    ),\r\n  }).isRequired,\r\n};\r\n\r\nexport default MovieCard;\r\n\r\n// Діма Берестень\r\n"]},"metadata":{},"sourceType":"module"}